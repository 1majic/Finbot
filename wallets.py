import datetime
import db
from typing import NamedTuple, Optional

import exceptions


class Wallet(NamedTuple):
    """–°—Ç—É—Ä–∫—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –ë–î"""
    name: str
    date: Optional[str]


def add_wallet(name: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    all_wallets = db.wallet_list()
    wallet = name
    if wallet in all_wallets:
        return None
    db.new_table(name)
    return Wallet(name=name,
                  date=str(current_date()))


def all_balances():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∏—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    walls = {}
    current_balance = 0
    result = []
    all_wallets = db.wallet_list()
    if not all_wallets:
        return exceptions.EmptyWalletList
    for i in all_wallets:
        income, outcome = get_balance(i)
        if not income:
            income = 0
        if not outcome:
            outcome = 0
        walls[i] = f'{income} {outcome}'
    for walls, values in walls.items():
        income, outcome = values.split()
        current_balance += float(income) - float(outcome)
        result.append(
            f'üíº<b>{walls}</b>: {str(round(float(income) - float(outcome)))}—Ä\n{" " * 10}–î–æ—Ö–æ–¥: {income}—Ä\n'
            f'{" " * 10}–†–∞—Å—Ö–æ–¥: {outcome}—Ä')
    return result, current_balance


def delete_wallet(wallet_name):
    """–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ë–î"""
    return db.delete_wallet(wallet_name)


def get_balance(wallet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞ —É –∫–æ—à–µ–ª—å–∫–∞"""
    income = db.get_comes(wallet, '–î–æ—Ö–æ–¥')[0]
    outcome = db.get_comes(wallet, '–†–∞—Å—Ö–æ–¥')[0]
    return income, outcome


def current_date():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏–π –¥–∞—Ç—ã"""
    current = datetime.datetime.today().date()
    return current
