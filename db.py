from typing import Dict

import sqlite3
import wallets
import exceptions
from loggings import lets_logging


def init_db(user):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î"""
    global conn
    global cursor
    conn = sqlite3.connect(f"db/{user}.db")
    cursor = conn.cursor()
    lets_logging("info", f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {user} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def insert(table: str, column_values: Dict):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ë–î"""
    columns = ', '.join(column_values.keys())
    values = [tuple(column_values.values())]
    placeholders = ", ".join("?" * len(column_values.keys()))
    cursor.executemany(
        f"INSERT INTO {table} "
        f"({columns}) "
        f"VALUES ({placeholders})",
        values)
    conn.commit()


def wallet_list():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute('SELECT name from sqlite_master where type= "table"')
    tuples_wallet = cursor.fetchall()
    walls = []
    for i in tuples_wallet:
        walls.append(i[0])
    return walls


def check_wallet(wallet):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ—à–µ–ª—å–∫–∞ –≤ –±–∞–∑–µ"""
    if wallet in wallet_list():
        return True
    return exceptions.WalletNotFound


def new_table(name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞(—Ç–∞–±–ª–∏—Ü—ã)"""
    cursor.execute(f"""CREATE TABLE {name}(
    amount FLOAT ,
    type TEXT ,
    comment TEXT ,
    date TEXT)""")
    lets_logging("info", f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ - {name}")
    conn.commit()


def get_comes(wallet, exp_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞(–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)"""
    cursor.execute(f'SELECT sum(amount) from {wallet} where type="{exp_type.lower()}"')
    return cursor.fetchall()[0]


def get_expenses_day(wallet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    date = wallets.current_date()
    try:
        if '–≤—Å–µ' in wallet:
            all_wallets_expenses = []
            for i in wallet_list():
                cursor.execute(f"SELECT * FROM {i} WHERE date(date)='{date}'")
                ftc = exp_reader(list(cursor.fetchall()))
                if not ftc:
                    continue
                all_wallets_expenses.append('üíº<b>' + i + '</b>:\n' + parse_message(ftc))
            return all_wallets_expenses
        else:
            cursor.execute(f"SELECT * FROM {wallet} WHERE date(date)='{date}'")
            ftc = exp_reader(list(cursor.fetchall()))
            return [parse_message(ftc)]
    except Exception as e:
        return e


def get_expenses_month(wallet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    date = wallets.current_date()
    first_day_of_month = f'{date.year:04d}-{date.month:02d}-01'
    if '–≤—Å–µ' in wallet:
        all_wallets_expenses = []
        for i in wallet_list():
            cursor.execute(f"SELECT * FROM {i} WHERE date(date)>='{first_day_of_month}'")
            ftc = exp_reader(list(cursor.fetchall()))
            if not ftc:
                continue
            all_wallets_expenses.append('üíº<b>' + i + '</b>:\n' + parse_message(ftc))
        return all_wallets_expenses
    else:
        cursor.execute(f"SELECT * FROM {wallet} WHERE date(date)>='{first_day_of_month}'")
        ftc = exp_reader(list(cursor.fetchall()))
        return [parse_message(ftc)]


def get_expenses_year(wallet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥"""
    date = wallets.current_date()
    first_month = f'{date.year:04d}-01-01'
    if '–≤—Å–µ' in wallet:
        all_wallets_expenses = []
        for i in wallet_list():
            cursor.execute(f"SELECT * FROM {i} WHERE date(date)>='{first_month}'")
            ftc = exp_reader(list(cursor.fetchall()))
            if not ftc:
                continue
            all_wallets_expenses.append('üíº<b>' + i + '</b>:\n' + parse_message(ftc))
        return all_wallets_expenses
    else:
        cursor.execute(f"SELECT * FROM {wallet} WHERE date(date)>='{first_month}'")
        ftc = exp_reader(list(cursor.fetchall()))
        return [parse_message(ftc)]


def get_expenses_date(date, wallet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å"""
    date = parse_date(date)
    if '–≤—Å–µ' in wallet:
        all_wallets_expenses = []
        for i in wallet_list():
            cursor.execute(f"SELECT * FROM {i} WHERE date(date)='{date}'")
            ftc = exp_reader(list(cursor.fetchall()))
            if not ftc:
                continue
            all_wallets_expenses.append(i + ':\n' + parse_message(ftc))
        return all_wallets_expenses
    else:
        cursor.execute(f"SELECT * FROM {wallet} WHERE date(date)='{date}'")
        ftc = exp_reader(list(cursor.fetchall()))
        if ftc:
            return [parse_message(ftc)]
        return ftc


def parse_message(text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–∏–¥ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    all_operations = []
    for i in sorted(text, reverse=True, key=lambda x: x[-1]):
        amount, exp_type, comment, date = i
        if exp_type == '–¥–æ—Ö–æ–¥':
            all_operations.append(f'    +{amount} –≤ {date}: {comment}')
        else:
            all_operations.append(f'    -{amount} –≤ {date}: {comment}')
    return '\n'.join(all_operations)


def parse_date(date):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ–Ω—è—Ç–Ω—ã–π SQLite"""
    date = date.split('.')
    return f'{date[-1]}-{date[-2]}-{date[-3]}'


def deparse_date(date):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ SQLite —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –æ–±—ã—á–Ω—ã–π"""
    date = date.split('-')
    return f'{date[-1]}.{date[-2]}.{date[-3]}'


def delete_wallet(wallet: str):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫(—Ç–∞–±–ª–∏—Ü—É) –∏–∑ –ë–î"""
    try:
        cursor.execute(f'DROP TABLE {wallet}')
    except Exception as e:
        return e


def exp_reader(lst_of_exp):
    """–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∏–¥ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–π –≤–∏–¥"""
    result = []
    for i in lst_of_exp[::]:
        date = deparse_date(i[-1])
        result.append((i[:3] + (date,)))
    return result
